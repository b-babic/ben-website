---
---

<div class="hidden sm:block relative overflow-hidden -rotate-12 p-2">
  <div>
    <div class="content--canvas w-full h-[30rem]" id="heart"></div>
  </div>
</div>

<script lang="js" type="module">
  "use strict";

  var loaded = false;
  var container;
  var canvas;
  var ctx;

  function setup() {
    createCanvas();
    resize();
    init();
  }

  function createCanvas() {
    container = document.getElementById("heart");

    if (!container) {
      loaded = false;
      return;
    }

    canvas = document.createElement("canvas");
    ctx = canvas.getContext("2d");
    canvas.style = `
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
	`;
    container.appendChild(canvas);

    loaded = true;
  }

  function resize() {
    const { innerWidth, innerHeight } = window;

    canvas.width = innerWidth;
    canvas.height = innerHeight;

    ctx.drawImage(canvas, 0, 0);

    canvas.width = innerWidth;
    canvas.height = innerHeight;

    ctx.drawImage(canvas, 0, 0);
  }

  function init() {
    if (!loaded) return;

    const coefficient = 0.7;
    const width = (canvas.width = coefficient * innerWidth);
    const height = (canvas.height = coefficient * innerHeight);
    const rand = Math.random;
    ctx.fillRect(0, 0, width, height);

    var heartPosition = function (rad) {
      //   return [Math.sin(rad), Math.cos(rad)];

      return [
        Math.pow(Math.sin(rad), 3),
        -(
          15 * Math.cos(rad) -
          5 * Math.cos(2 * rad) -
          2 * Math.cos(3 * rad) -
          Math.cos(4 * rad)
        ),
      ];
    };

    var scaleAndTranslate = function (pos, sx, sy, dx, dy) {
      return [dx + pos[0] * sx, dy + pos[1] * sy];
    };

    var traceCount = 25;
    var pointsOrigin = [];
    var i;
    var dr = 0.1;
    for (i = 0; i < Math.PI * 2; i += dr)
      pointsOrigin.push(scaleAndTranslate(heartPosition(i), 250, 13, 0, 0));
    for (i = 0; i < Math.PI * 2; i += dr)
      pointsOrigin.push(scaleAndTranslate(heartPosition(i), 200, 9, 0, 0));
    for (i = 0; i < Math.PI * 2; i += dr)
      pointsOrigin.push(scaleAndTranslate(heartPosition(i), 140, 5, 0, 0));
    var heartPointsCount = pointsOrigin.length;

    var targetPoints = [];
    var pulse = function (kx, ky) {
      for (i = 0; i < pointsOrigin.length; i++) {
        targetPoints[i] = [];
        targetPoints[i][0] = kx * pointsOrigin[i][0] + width / 2;
        targetPoints[i][1] = ky * pointsOrigin[i][1] + height / 2;
      }
    };

    var e = [];
    for (i = 0; i < heartPointsCount; i++) {
      var x = rand() * width;
      var y = rand() * height;
      e[i] = {
        vx: 0,
        vy: 0,
        R: 2,
        speed: rand() + 5,
        q: ~~(rand() * heartPointsCount),
        D: 2 * (i % 2) - 1,
        force: 0.2 * rand() + 0.7,
        f:
          "hsla(0," +
          ~~(40 * rand() + 60) +
          "%," +
          ~~(60 * rand() + 20) +
          "%,.5)",
        trace: [],
      };
      for (var k = 0; k < traceCount; k++) e[i].trace[k] = { x: x, y: y };
    }

    var config = {
      traceK: 0.4,
      timeDelta: 0.01,
    };

    var time = 0;
    var loop = function () {
      var n = -Math.cos(time);
      pulse((1 + n) * 0.5, (1 + n) * 0.5);
      time += (Math.sin(time) < 0 ? 9 : n > 0.8 ? 0.2 : 1) * config.timeDelta;
      ctx.clearRect(0, 0, width, height); // Make it transparent

      ctx.fillRect(0, 0, width, height);
      for (var i = e.length; i--; ) {
        var u = e[i];
        var q = targetPoints[u.q];
        var dx = u.trace[0].x - q[0];
        var dy = u.trace[0].y - q[1];
        var length = Math.sqrt(dx * dx + dy * dy);
        if (10 > length) {
          if (0.95 < rand()) {
            u.q = ~~(rand() * heartPointsCount);
          } else {
            if (0.99 < rand()) {
              u.D *= -1;
            }
            u.q += u.D;
            u.q %= heartPointsCount;
            if (0 > u.q) {
              u.q += heartPointsCount;
            }
          }
        }
        u.vx += (-dx / length) * u.speed;
        u.vy += (-dy / length) * u.speed;
        u.trace[0].x += u.vx;
        u.trace[0].y += u.vy;
        u.vx *= u.force;
        u.vy *= u.force;
        for (var k = 0; k < u.trace.length - 1; ) {
          var T = u.trace[k];
          var N = u.trace[++k];
          N.x -= config.traceK * (N.x - T.x);
          N.y -= config.traceK * (N.y - T.y);
        }
        ctx.fillStyle = u.f;
        for (var k = 0; k < u.trace.length; k++) {
          ctx.fillRect(u.trace[k].x, u.trace[k].y, 1, 1);
        }
      }

      ctx.fillStyle = "rgba(236, 236, 232, .1)";

      for (i = u.trace.length; i--; )
        ctx.fillRect(targetPoints[i][0], targetPoints[i][1], 2, 2);

      window.requestAnimationFrame(loop, canvas);
    };

    // Run the loop
    loop();
  }

  // Load the art
  window.addEventListener("load", setup);
  window.addEventListener("resize", resize);
</script>
